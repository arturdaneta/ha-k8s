---

############################################
# Setup Kubernetes cluster internal routing
############################################

# Expects kubectl being configured on the local machine
# using kubectl.yaml playbook

# 1) Infer the routing mapping for the Pod cluster
#   kubectl get nodes  --output=jsonpath='{range .items[*]}{.status.addresses[?(@.type=="InternalIP")].address} {.spec.podCIDR} {"\n"}{end}'
# 2) Set additional routes on every worker
#   e.g.  route add -net 10.200.0.0 netmask 255.255.255.0 gw 10.43.0.31 metric 1

- hosts: worker

  tasks:

  # Run kuberctl on local machine to gather kubernetes nodes "facts"
  - name: Gather Kubernetes nodes facts
    command: "kubectl get nodes --server=http://{{kubernetes_master_url}}:8080 --output=json --output=jsonpath='{range .items[*]}{.status.addresses[?(@.type=="InternalIP")].address},{.spec.podCIDR}{"\n"}{end}' | grep {{ hostvars[inventory_hostname].ec2_private_ip_address }}"
    register: net
    become: true
 
  - name: Add route
    command: "sudo route add -net $(echo {{net.stdout}} | cut -d ',' -f 2 | cut -d '/' -f 1) netmask 255.255.255.0 gw $(echo {{net.stdout}} | cut -d ',' -f 1) metric 1"
    register: result
    become: true
 

  # VPC knows nothing about our Pod subnet and we must avoid internal traffic being routed as outbound Internet traffic
  # For explaination, see: http://kubernetes.io/docs/admin/networking/#google-compute-engine-gce
  - name: Add iptable rule to masquerade traffic bound outside VPC CIDR
    command: "iptables -t nat -A POSTROUTING ! -d {{ internal_cidr }} -o eth0 -j MASQUERADE"
    become: true